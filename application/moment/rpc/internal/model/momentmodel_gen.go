// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	momentFieldNames          = builder.RawFieldNames(&Moment{})
	momentRows                = strings.Join(momentFieldNames, ",")
	momentRowsExpectAutoSet   = strings.Join(stringx.Remove(momentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	momentRowsWithPlaceHolder = strings.Join(stringx.Remove(momentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLifememoMomentMomentIdPrefix = "cache:lifememoMoment:moment:id:"
)

type (
	momentModel interface {
		Insert(ctx context.Context, data *Moment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Moment, error)
		Update(ctx context.Context, data *Moment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMomentModel struct {
		sqlc.CachedConn
		table string
	}

	Moment struct {
		Id          int64     `db:"id"`           // 主键ID
		Content     string    `db:"content"`      // 内容
		AuthorId    int64     `db:"author_id"`    // 作者ID
		Status      int64     `db:"status"`       // 状态 0:待审核 1:审核不通过 2:可见 3:私密 4:用户删除
		CommentNum  int64     `db:"comment_num"`  // 评论数
		LikeNum     int64     `db:"like_num"`     // 点赞数
		CollectNum  int64     `db:"collect_num"`  // 收藏数
		ViewNum     int64     `db:"view_num"`     // 浏览数
		ShareNum    int64     `db:"share_num"`    // 分享数
		TagIds      string    `db:"tag_ids"`      // 标签ID
		PublishTime time.Time `db:"publish_time"` // 发布时间
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 最后修改时间
	}
)

func newMomentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMomentModel {
	return &defaultMomentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`moment`",
	}
}

func (m *defaultMomentModel) Delete(ctx context.Context, id int64) error {
	lifememoMomentMomentIdKey := fmt.Sprintf("%s%v", cacheLifememoMomentMomentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, lifememoMomentMomentIdKey)
	return err
}

func (m *defaultMomentModel) FindOne(ctx context.Context, id int64) (*Moment, error) {
	lifememoMomentMomentIdKey := fmt.Sprintf("%s%v", cacheLifememoMomentMomentIdPrefix, id)
	var resp Moment
	err := m.QueryRowCtx(ctx, &resp, lifememoMomentMomentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", momentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMomentModel) Insert(ctx context.Context, data *Moment) (sql.Result, error) {
	lifememoMomentMomentIdKey := fmt.Sprintf("%s%v", cacheLifememoMomentMomentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, momentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Content, data.AuthorId, data.Status, data.CommentNum, data.LikeNum, data.CollectNum, data.ViewNum, data.ShareNum, data.TagIds, data.PublishTime)
	}, lifememoMomentMomentIdKey)
	return ret, err
}

func (m *defaultMomentModel) Update(ctx context.Context, data *Moment) error {
	lifememoMomentMomentIdKey := fmt.Sprintf("%s%v", cacheLifememoMomentMomentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, momentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Content, data.AuthorId, data.Status, data.CommentNum, data.LikeNum, data.CollectNum, data.ViewNum, data.ShareNum, data.TagIds, data.PublishTime, data.Id)
	}, lifememoMomentMomentIdKey)
	return err
}

func (m *defaultMomentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLifememoMomentMomentIdPrefix, primary)
}

func (m *defaultMomentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", momentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMomentModel) tableName() string {
	return m.table
}
